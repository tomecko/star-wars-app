{"version":3,"sources":["config/config.js","helpers/getWinnerIndexes.js","helpers/getNewScores.js","helpers/getScoresMax.js","helpers/getZeroes.js","services/StarWarsDataService.js","helpers/shuffleArray.js","config/machine.js","helpers/getNewBattle.js","components/Battle.js","components/Failure.js","components/Footer.js","components/Header.js","components/Loading.js","components/Menu.js","components/Scores.js","serviceWorker.js","index.js","components/App.js"],"names":["RESOURCE_INFOS","name","getScore","mass","Number","getScoreText","scoreDescription","crew","getWinnerIndexes","items","scores","map","max","Math","Array","from","keys","filter","_","i","getScoresMax","ceil","Object","count","starWarsDataService","rootUrl","data","this","resourceName","getAll","then","all","source","array","length","j","floor","random","shuffleArray","slice","Promise","resolve","getAllPageByPage","pageUrl","acc","fetch","json","next","concat","results","machine","Machine","context","battle","error","loadingShouldFail","resourceInfo","reduce","val","initial","states","blank","on","INIT","loading","invoke","src","onDone","onError","target","actions","assign","event","failure","RETRY","menu","PLAY","winners","after","exit","services","loadingInvoke","reject","Error","battleInvoke","getRandom","Battle","CardGroup","item","Card","key","body","className","inverse","includes","undefined","color","Badge","Failure","send","CardBody","message","Button","onClick","Footer","Header","Jumbotron","Loading","Spinner","type","size","Menu","CardTitle","ButtonGroup","info","Scores","Progress","value","Boolean","window","location","hostname","match","ReactDOM","render","props","useMachine","current","useEffect","Container","Row","Col","xs","md","lg","matches","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.978856f2.chunk.js","sourcesContent":["export const BATTLE_TIMEOUT = 3000;\nexport const ITEM_COUNT = 2;\n\nexport const RESOURCE_INFOS = [\n  {\n    name: 'people',\n    getScore: ({ mass }) => Number(mass) || 0,\n    getScoreText: ({ mass }) => mass,\n    scoreDescription: 'mass',\n  },\n  {\n    name: 'starships',\n    getScore: ({ crew }) => Number(crew) || 0,\n    getScoreText: ({ crew }) => crew,\n    scoreDescription: 'crew',\n  },\n];\n","export const getWinnerIndexes = (items, getScore) => {\n  const scores = items.map(getScore);\n  const max = Math.max(...scores);\n  return max === 0\n    ? []\n    : Array.from(scores.keys()).filter((_, i) => scores[i] === max);\n}\n","import { getWinnerIndexes } from './getWinnerIndexes';\n\nexport const getNewScores = (context, event) =>\n  getWinnerIndexes(event.data, context.resourceInfo.getScore)\n    .reduce(\n      (scores, i) => ({ ...scores, [i]: scores[i] + 1 }),\n      context.scores,\n    );\n","export const getScoresMax = scores =>\n  Math.max(\n    10,\n    Math.ceil(Math.max(...Object.keys(scores).map(i => scores[i])) / 10) * 10,\n  );\n","export const getZeroes = (count) =>\n  [...Array(count).keys()]\n    .reduce((acc, val) => ({ ...acc, [val]: 0 }), {})\n","import { shuffleArray } from '../helpers';\n\nexport class StarWarsDataService {\n\n  data = {};\n\n  constructor(\n    rootUrl = 'https://swapi.co/api/',\n  ) {\n    this.rootUrl = rootUrl;\n  }\n\n  getRandom(resourceName, count) {\n    return this.getAll(resourceName)\n      .then(all => shuffleArray(all.slice(0)).slice(0, count));\n  }\n\n  getAll(resourceName) {\n    return this.data[resourceName]\n      ? Promise.resolve(this.data[resourceName])\n      : this.getAllPageByPage(`${this.rootUrl}${resourceName}/`)\n          .then(all => {\n            this.data[resourceName] = all;\n            return all;\n          });\n  }\n\n  getAllPageByPage(pageUrl, acc = []) {\n    return fetch(pageUrl)\n      .then(data => data.json())\n      .then(data => data.next\n        ? this.getAllPageByPage(data.next, acc.concat(data.results))\n        : acc.concat(data.results)\n      );\n  }\n\n}\n\nexport const starWarsDataService = new StarWarsDataService();\n","// https://stackoverflow.com/a/12646864/248482\nexport function shuffleArray(source) {\n    const array = source;\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n","import { Machine, assign } from 'xstate';\n\nimport { getNewScores, getZeroes, getNewBattle } from '../helpers';\nimport { starWarsDataService } from '../services';\n\nimport { BATTLE_TIMEOUT, ITEM_COUNT, RESOURCE_INFOS } from './config';\n\nexport const machine = Machine({\n  context: {\n    battle: null,\n    error: null,\n    loadingShouldFail: Math.random() < 0.5, // for demonstration purposes only\n    resourceInfo: null,\n    scores: getZeroes(ITEM_COUNT),\n  },\n  initial: 'blank',\n  states: {\n    blank: {\n      on: {\n        INIT: 'loading',\n      },\n    },\n    loading: {\n      invoke: {\n        src: 'loadingInvoke',\n        onDone: 'menu',\n        onError: {\n          target: 'failure',\n          actions: assign({ error: (_, event) => event.data }),\n        },\n      },\n    },\n    failure: {\n      on: {\n        RETRY: {\n          target: 'loading',\n          actions: assign({ error: null, loadingShouldFail: false }),\n        }\n      },\n    },\n    menu: {\n      on: {\n        PLAY: {\n          target: 'battle',\n          actions: assign({ resourceInfo: (_, event) => event.resourceInfo }),\n        },\n      }\n    },\n    battle: {\n      invoke: {\n        src: 'battleInvoke',\n        onDone: {\n          actions: assign(({\n            battle: getNewBattle,\n            scores: getNewScores,\n          })),\n        },\n      },\n      after: {\n        [BATTLE_TIMEOUT]: 'menu',\n      },\n      exit: assign(({ battle: null })),\n    },\n  },\n}, {\n  services: {\n    loadingInvoke: (context) => context.loadingShouldFail\n      ? Promise.reject(new Error('very informative error message'))\n      : Promise.all(RESOURCE_INFOS.map(({ name }) =>\n          starWarsDataService.getAll(name))),\n    battleInvoke: (context) =>\n      starWarsDataService.getRandom(context.resourceInfo.name, ITEM_COUNT),\n  },\n});\n","import { getWinnerIndexes } from './getWinnerIndexes';\n\nexport const getNewBattle = (context, event) => ({\n  items: event.data,\n  winners: getWinnerIndexes(event.data, context.resourceInfo.getScore),\n});\n","import React from 'react';\nimport { Badge, Card, CardGroup } from 'reactstrap';\n\nexport function Battle({ battle, resourceInfo }) {\n  const { items, winners } = battle;\n  return (\n    <CardGroup>\n      {items && items.map((item, i) => (\n        <Card\n          key={i}\n          body\n          className=\"text-center\"\n          inverse={winners.includes(i) ? true : undefined}\n          color={winners.includes(i) ? 'primary' : undefined}\n        >\n          <p>\n            <strong>{item.name}</strong><br/>\n            <Badge>\n              {resourceInfo.scoreDescription}: {resourceInfo.getScoreText(item)}\n            </Badge>\n          </p>\n        </Card>\n      ))}\n    </CardGroup>\n  );\n}\n\n","import React from 'react';\nimport { Button, Card, CardBody } from 'reactstrap';\n\nexport function Failure({ error, send }) {\n  return (\n    <Card>\n      <CardBody>\n        <p>\n          Something went wrong\n          {error ? ` (details: ${error.message})` : null}.\n        </p>\n        <Button\n          color=\"danger\"\n          onClick={() => send('RETRY')}\n        >\n          let's try again!\n        </Button>\n      </CardBody>\n    </Card>\n  );\n};\n","import React from 'react';\nimport { Card } from 'reactstrap';\n\nexport function Footer() {\n  return (\n    <footer>\n      <Card body>\n        <ul>\n          <li>\n            For demonstration purposes fetching data fails\n            with 50% probability on the first attempt.\n          </li>\n          <li>\n            Currently the app loads all data on startup.\n            It does not scale and may take some time especially if SW API is slow :(\n            Alternatively it would be possible to get random pair\n            of ids on the client side and then fetch two items by their id.\n            That would be correct only if made strong assumptions\n            about all ids (i.e. ids are always subsequent integers).\n            On the other hand the current solution (downloading all data) results in\n            smooth and instantaneous interactions during the game.\n          </li>\n          <li>\n            As a challenge I decided to try out a new approach\n            toward handling app logic and configured state machine (XState).\n            Naturally it would also be possible to set up Redux store\n            or just use component's state as the app is relatively simple.\n          </li>\n        </ul>\n      </Card>\n    </footer>\n  );\n}\n\n","import React from 'react';\nimport { Jumbotron } from 'reactstrap';\n\nexport function Header() {\n  return (\n    <Jumbotron>\n      <h1>Star Wars App</h1>\n      <p>Are you ready for the action?</p>\n    </Jumbotron>\n  );\n}\n\n","import React from 'react';\nimport { Card, CardBody, Spinner } from 'reactstrap';\n\nexport function Loading() {\n  return (\n    <Card>\n      <CardBody>\n        <Spinner type=\"grow\" size=\"sm\" color=\"primary\" />{' '}\n        Loading…\n      </CardBody>\n    </Card>\n  );\n}\n\n","import React from 'react';\nimport { Button, ButtonGroup, Card, CardBody, CardTitle } from 'reactstrap';\n\nimport { RESOURCE_INFOS } from '../config';\n\nexport function Menu({ resourceInfo, send }) {\n  return (\n    <Card>\n      <CardBody>\n        <CardTitle>Please choose battle type.</CardTitle>\n        <ButtonGroup>\n          {RESOURCE_INFOS.map(info => (\n            <Button\n              key={info.name}\n              color=\"primary\"\n              onClick={() => {\n                send({\n                  type: 'PLAY',\n                  resourceInfo: info,\n                });\n              }}\n            >\n              {info.name}\n              {' '}\n              {resourceInfo === info ? <small>(continue)</small> : null}\n            </Button>\n          ))}\n        </ButtonGroup>\n      </CardBody>\n    </Card>\n  );\n}\n\n","import React from 'react';\nimport { Card, Progress } from 'reactstrap';\n\nimport { getScoresMax } from '../helpers';\n\nexport function Scores({ scores }) {\n  return (\n    <Card body>\n      {Object.keys(scores).map(i => (\n        <div key={i}>\n          Player {Number(i) + 1}\n          <Progress value={Math.max(scores[i], 0.5)} max={getScoresMax(scores)}>\n            {scores[i] > 0 ? scores[i] : '0'}\n          </Progress>\n        </div>\n      ))}\n    </Card>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { useMachine } from '@xstate/react';\n\nimport { machine } from '../config';\n\nimport { Battle } from './Battle';\nimport { Failure } from './Failure';\nimport { Footer } from './Footer';\nimport { Header } from './Header';\nimport { Loading } from './Loading';\nimport { Menu } from './Menu';\nimport { Scores } from './Scores';\n\nexport function App(props) {\n  const [current, send] = useMachine(props.machine || machine);\n  useEffect(() => {\n    send('INIT');\n  }, [send])\n\n  return (\n    <Container>\n      <Row>\n        <Col xs=\"12\" md=\"8\" lg=\"6\">\n          <Header />\n          <Scores scores={current.context.scores} />\n\n          {current.matches('loading') ? <Loading /> : ''}\n\n          {current.matches('failure') ? (\n            <Failure error={current.context.error} send={send} />\n           ) : ''}\n\n          {current.matches('menu') ? (\n            <Menu resourceInfo={current.context.resourceInfo} send={send} />\n           ) : null}\n\n          {current.matches('loading') || current.matches('menu') ? (\n            <Footer />\n          ) : null}\n\n          {current.matches('battle') && current.context.battle\n            ? <Battle\n                battle={current.context.battle}\n                resourceInfo={current.context.resourceInfo}\n              />\n            : null}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\n"],"sourceRoot":""}